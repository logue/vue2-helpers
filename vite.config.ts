import { visualizer } from 'rollup-plugin-visualizer';
import { defineConfig, type UserConfig } from 'vite';
import banner from 'vite-plugin-banner';
import checker from 'vite-plugin-checker';
import path from 'path';
import bannerText from './scripts/banner';

// https://vitejs.dev/config/
export default defineConfig(async ({ mode }): Promise<UserConfig> => {
  const config: UserConfig = {
    // https://vitejs.dev/config/#server-options
    server: {
      fs: {
        // Allow serving files from one level up to the project root
        allow: ['..'],
      },
    },
    plugins: [
      banner(bannerText),
      // vite-plugin-checker
      // https://github.com/fi3ework/vite-plugin-checker
      checker({
        typescript: true,
        vueTsc: true,
        eslint: {
          lintCommand: 'eslint', // for example, lint .ts & .tsx
        },
      }),
    ],
    // Build Options
    // https://vitejs.dev/config/#build-options
    build: {
      lib: {
        entry: path.resolve(__dirname, 'src/index.ts'),
        name: 'vue2-helpers',
        formats: ['es'],
      },
      rollupOptions: {
        input: {
          index: path.resolve(__dirname, 'src/index.ts'),
          vuex: path.resolve(__dirname, 'src/vuex.ts'),
          'vue-router': path.resolve(__dirname, 'src/vue-router.ts'),
          vuetify: path.resolve(__dirname, 'src/vuetify.ts'),
        },
        external: ['vue', 'vuex', 'vue-router', 'vuetify'],
        plugins: [
          mode === 'analyze'
            ? // rollup-plugin-visualizer
              // https://github.com/btd/rollup-plugin-visualizer
              visualizer({
                open: true,
                filename: 'dist/stats.html',
                gzipSize: true,
                brotliSize: true,
              })
            : undefined,
        ],
        output: {
          preserveModules: true,
          format: 'es',
          entryFileNames: ({ name: fileName }) => `${fileName}.js`,
        },
      },
      target: 'es2021',
      // Minify option
      // https://vitejs.dev/config/#build-minify
      minify: 'terser',
      terserOptions: {
        ecma: 2020,
        parse: {},
        compress: { drop_console: false },
        mangle: true, // Note `mangle.properties` is `false` by default.
        module: true,
        output: { comments: true, beautify: false },
      },
    },
  };

  /*
  // Write meta data.
  fs.writeFileSync(
    path.resolve(path.join(__dirname, 'src/Meta.ts')),
    `import type MetaInterface from '@/interfaces/MetaInterface';

// This file is auto-generated by the build system.
const meta: MetaInterface = {
  version: '${require('./package.json').version}',
  date: '${new Date().toISOString()}',
};
export default meta;
`
  );
  */

  return config;
});
